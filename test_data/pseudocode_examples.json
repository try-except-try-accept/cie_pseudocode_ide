{
	"byref": {
		"expected": "tbc\n",
		"input": "// this procedure swaps\n// values of X and Y\nPROCEDURE SWAP(BYREF X : INTEGER, Y INTEGER)\nTemp \u2190 X // temporarily store X\nX \u2190 Y\nY \u2190 Temp\nENDPROCEDURE"
	},
	"declaration_and_assignment": {
		"expected": "counter = 0 # integer\ntotal_to_pay = 0.0 # real\ngame_over = False # boolean\nHOURLY_RATE = 6.50\nDEFAULT_TEXT = \"N/A\"\ncounter += 1\ntotal_to_pay = number_of_hours * hourly_rate\n",
		"input": "DECLARE Counter : INTEGER\nDECLARE TotalToPay : REAL\nDECLARE GameOver : BOOLEAN\nCONSTANT HourlyRate = 6.50\nCONSTANT DefaultText = \"N/A\"\nCounter \u2190 0\nCounter \u2190 Counter + 1\nTotalToPay \u2190 NumberOfHours * HourlyRate"
	},
	"arrays": {
		"expected": "student_names = [None for i in range(30)] # array of strings\nnoughts_and_crosses = [[None for i in range(3)] for j in range(3)] # 2d array of characters\nstudent_names[0] = \"Ali\"\nnoughts_and_crosses[1, 2] = 'X'\nstudent_names[n+1] = student_names[n]\n# assigning a group of array elements\nfor index in range(1, 31):\n    student_names[index] = \"\"\n\n",
		"input": "DECLARE StudentNames : ARRAY[1:30] OF STRING\nDECLARE NoughtsAndCrosses : ARRAY[1:3,1:3] OF CHAR\nStudentNames[1] \u2190 \"Ali\"\nNoughtsAndCrosses[2,3] \u2190 \ua78cX\ua78c\nStudentNames[n+1] \u2190 StudentNames[n]\n// assigning a group of array elements\nFOR Index \u2190 1 TO 30\nStudentNames[Index] \u2190 \"\"\nNEXT Index"
	},
	"input_output": {
		"expected": "answer = input()\nprint(score)\nprint(\"You have\", lives, \" lives left\")\n",
		"input": "INPUT Answer\nOUTPUT Score\nOUTPUT \"You have \", Lives, \" lives left\""
	},
	"built-in_functions": {
		"expected": "\"ABCDEFGH\"[:3]\n\"ABCDEFGH\"[-3:]\nlen(\"Happy Days\")\n\"ABCDEFGH\"[3:6]\n'W'.is_lower()\n'h'.is_upper()\n\"Error 803\".upper()\n\"JIM 803\".lower()\nstr(87.5)\nfloat(\"23.45\")\nint(\"23\")\n\"12.36\".replace(\"-\", \"\", 1).replace(\".\", \"\", 1).is_numeric()\nord('A')\nchr(87)\nINT(27.5415)\nRAND(87)\n",
		"input": "LEFT(\"ABCDEFGH\", 3)\nRIGHT(\"ABCDEFGH\", 3)\nLENGTH(\"Happy Days\")\nMID(\"ABCDEFGH\", 2, 3\nLCASE('W')\nUCASE('h')\nTO_UPPER(\"Error 803\")\nTO_LOWER(\"JIM 803\")\nNUM_TO_STR(87.5)\nSTR_TO_NUM(\"23.45\")\nSTR_TO_NUM(\"23\")\nIS_NUM(\"12.36\")\nASC('A')\nCHR(87)\nint(27.5415)\nrandrange(0, 87)"
	},
	"operators": {
		"expected": "x = 10 # integer\ny = 5 # integer\ns = \"Hello\" # string\ns + s\ny > x and len(s) == 5\ny > x or len(s) == 5\nnot (y > x or len(s) == 5)\ny % x\ny // x\n",
		"input": "DECLARE x : INTEGER\nDECLARE y : INTEGER\nDECLARE s : STRING\nx \u2190 10\ny \u2190 5\ns \u2190 \"Hello\"\ns & s\ny > x AND LENGTH(s) = 5\ny > x OR LENGTH(s) = 5\nNOT (y > x OR LENGTH(s) = 5)\ny MOD x\ny DIV x"
	},
	"selection": {
		"expected": "if challenger_score > champion_score: if challenger_score > highest_score: print(challenger_name, \" is champion and highest scorer\")\nelse: print(player1_name, \" is the new champion\"\nelse: print(champion_name, \" is still the new champion\")\nif champion_score > highest_score: print(champion_name, \" is also the highest scorer\"",
		"input": "IF ChallengerScore > ChampionScore\nTHEN\nIF ChallengerScore > HighestScore\nTHEN\nOUTPUT ChallengerName, \" is champion and highest scorer\"\nELSE\nOUTPUT Player1Name, \" is the new champion\"\nENDIF\nELSE\nOUTPUT ChampionName, \" is still the champion\"\nIF ChampionScore > HighestScore\nTHEN\nOUTPUT ChampionName, \" is also the highest scorer\"\nENDIF\nENDIF"
	},
	"case_statements": {
		"expected": "\n",
		"input": "INPUT Move\nCASE OF Move\n\ua78cW\ua78c: Position \u2190 Position \u2212 10\n\ua78cS\ua78c: Position \u2190 Position + 10\n\ua78cA\ua78c: Position \u2190 Position \u2212 1\n\ua78cD\ua78c: Position \u2190 Position + 1\nOTHERWISE: CALL Beep\nENDCASE"
	},
	"count_controlled_loops": {
		"expected": "\n",
		"input": "Total \u2190 0\nFOR Row \u2190 1 TO MaxRow\nRowTotal \u2190 0\nFOR Column \u2190 1 TO 10\nRowTotal \u2190 RowTotal + Amount[Row, Column]\nNEXT Column\nOUTPUT \"Total for Row \", Row, \" is \", RowTotal\nTotal \u2190 Total + RowTotal\nNEXT Row\nOUTPUT \"The grand total is \", Total"
	},
	"post_condition_loops": {
		"expected": "\n",
		"input": "REPEAT\nOUTPUT \"Please enter the password\"\nINPUT Password\nUNTIL Password = \"Secret\""
	},
	"pre_condition_loops": {
		"expected": "\n",
		"input": "WHILE Number > 9\nNumber \u2190 Number \u2013 9\nENDWHILE"
	},
	"procedures": {
		"expected": "\n",
		"input": "PROCEDURE DefaultSquare\nCALL Square(100)\nENDPROCEDURE\nPROCEDURE Square(Size: INTEGER)\nFOR Side \u2190 1 TO 4\nCALL MoveForward (Size)\nCALL Turn (90)\nNEXT Side\nENDPROCEDURE\nIF Size = Default\nTHEN\nCALL DefaultSquare\nELSE\nCALL Square(Size)\nENDIF"
	},
	"functions": {
		"expected": "\n",
		"input": "FUNCTION Max(Number1: INTEGER, Number2: INTEGER) RETURNS INTEGER\nIF Number1 > Number2\nTHEN\nRETURN Number1\nELSE\nRETURN Number2\nENDIF\nENDFUNCTION\nOUTPUT \"Penalty Fine = \", Max(10, Distance*2)"
	},
	"text_files": {
		"expected": "\n",
		"input": "DECLARE LineOfText: STRING\nOPENFILE \"FileA.txt\" FOR READ\nOPENFILE \"FileB.txt\" FOR WRITE\nWHILE NOT EOF(\"FileA.txt\")\nREADFILE \"FileA.txt\", LineOfText\nIF LineOfText = \"\"\nTHEN\nWRITEFILE \"FileB.txt\", \"-------------------------\"\nELSE\nWRITEFILE \"FILEB.txt\", LineOfText\nENDIF\nENDWHILE\nCLOSEFILE \"FileA.txt\"\nCLOSEFILE \"FileB.txt\""
	},
	"binary_files": {
		"expected": "\n",
		"input": "DECLARE Pupil : Student\nDECLARE NewPupil: Student\nDECLARE Position: INTEGER\nNewPupil.Surname \u2190 \"Johnson\"\nNewPupil.Firstname \u2190 \"Leroy\"\nNewPupil.DateOfBirth \u2190 02/01/2005\nNewPupil.YearGroup \u2190 6\nNewPupil.FormGroup \u2190 \ua78cA\ua78c\nOPENFILE StudentFile.Dat FOR RANDOM\nFOR Position = \u2190 20 TO 10 STEP - 1\nSEEK \"StudentFile.Dat\", Position\nGETRECORD \"StudentFile.Dat\", Pupil\nSEEK \"StudentFile.Dat\", Position + 1\nPUTRECORD \"StudentFile.Dat\", Pupil\nNEXT Position\nSEEK \"StudentFile.Dat\", 10\nPUTRECORD \"StudentFile.Dat\", NewPupil\nCLOSEFILE \"StudentFile.dat\""
	},
	"user_defined_types": {
		"expected": "\n",
		"input": "TYPE Season = (Spring, Summer, Autumn, Winter)\nTYPE TAddPointer = ^INTEGER\nTYPE Student\nDECLARE Surname: STRING\nDECLARE FirstName: STRING\nDECLARE DateOfBirth: DATE\nDECLARE YearGroup: INTEGER\nDECLARE FormGroup: CHAR\nENDTYPE\nDECLARE Pupil1: Student\nDECLARE Pupil2: Student\nDECLARE Form : ARRAY[1: 30] OF Student\nDECLARE ThisSeason: Season\nDECLARE NextSeason: Season\nDECLARE MyAddPointer: TAddPointer\nPupil1.Surname \u2190 \"Johnson\"\nPupil1.Firstname \u2190 \"Leroy\"\nPupil1.DateOfBirth \u2190 02/01/2005\nPupil1.YearGroup \u2190 6\nPupil1.FormGroup \u2190 \ua78cA\ua78c\nPupil2 \u2190 Pupil1\nFOR Index \u2190 1 TO 30\nForm[Index].YearGroup \u2190 Form[Index].YearGroup + 1\nNEXT INDEX\nThisSeason \u2190 Spring\nMyAddPointer \u2190 ^ThisSeason\nNextSeason \u2190 MyAddPointer^ + 1\n// pointer is dereferenced to access the value stored at the address\n"
	}
}